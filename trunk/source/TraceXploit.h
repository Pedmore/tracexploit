#include <Winsock2.h>
#include <Windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <crtdbg.h>
#include <malloc.h>

//#include <crtdbg.h>
//#define _CRTDBG_MAP_ALLOC
//      _CrtSetDbgFlag ( _CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF );


#define MAX                     5000
#define FOLDER          "cluster"


// definition of a node for learning mode
struct tNode {
        char chTokenType[3];            //"s-c" / "bin" / "txt"
        unsigned char* pTokenValue;
        bool bDelim;
        bool bNullTerminated;
        bool bUnicode;
        struct tNode *next;
};


unsigned int fnReadPkt (char* pPcap, unsigned char* chPkt, DWORD* dwFileOffset);

//training linked list
bool tAddNode(const char* pType, const unsigned char* pValue, bool delim, bool nullTerminated, bool unicode);
void tAdd( struct tNode* pNewNode );
void tDeletenode( struct tNode* pTargetToken );
void tDeletelist( struct tNode* ptr );

//phase 1
bool fnTokenize(const unsigned char* chPkt, unsigned int nPktSize, char* pOriginIP);
bool fnTokenizeTxt (const unsigned char* pSeq);
void fnAdjustForNullTextToken();
bool fnMD5 (unsigned char* pAllTokens, char* pHashOutput);

bool fnInitCluster (const unsigned char* chPkt, unsigned int nPktSize);
bool fnStoreTokens (const unsigned char* chPkt, int nPktSize, const char* pHashOutput);

/* -------------------------------------------------------------------------------- */

// definition of a node for replay mode
// this linked list stores state of each PORTDST, up to 5
struct rNode {
        SOCKET connectSocket;                   //tcp socket
        char chIPDst[20];                               //dst ip in string representation. eg: "11 55 99 bb" -> "17.85.153.187"
        int nPortDst;                                   //dst port
        struct sockaddr_in serverAddr;
        WSADATA wsaData;
        unsigned char chRecvPkt[MAX];
        unsigned int nRecvSize;
        unsigned char* pCookie;

        struct rNode *next;
};


typedef struct _recvPktParam {
    struct rNode* pNode;
} recvPktParam, *pRecvPktParam;


//replay linked list
bool rAddNode(SOCKET connectSocket, struct sockaddr_in serverAddr, char* pReplayTargetIP);
void rAdd( struct rNode* pNewNode );
void rDeletenode( struct rNode* pTargetToken );
void rDeletelist( struct rNode *ptr );

//replay
bool fnReplay (const unsigned char* chPkt, unsigned int nPktSize, char* pOriginTargetIP, char* pReplayTargetIP);
void fnStorePktFields();
void fnChangePktFields (const unsigned char* chPkt, unsigned char* pSendPkt, unsigned int nPktSize, char* pReplayTargetIP);
bool fnCheckState();
void WINAPI fnRecvPkt( LPVOID lpParam );


void logError (const char* errMsg);